name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  SQLX_OFFLINE: true

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ethhook
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ethhook
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features postgres
      
      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://ethhook:password@localhost:5432/ethhook
        run: |
          sqlx database create
          sqlx migrate run
      
      - name: Run tests (without database-dependent tests)
        run: cargo test --workspace --lib --bins
        env:
          DATABASE_URL: postgresql://ethhook:password@localhost:5432/ethhook
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-for-ci
      
      - name: Run Admin API integration tests
        run: cargo test -p ethhook-admin-api --test integration_test -- --include-ignored
        env:
          DATABASE_URL: postgresql://ethhook:password@localhost:5432/ethhook
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-testing-only

  build:
    name: Build All Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools musl-dev pkg-config libssl-dev
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build workspace
        run: cargo build --workspace --release --target ${{ matrix.target }}
        env:
          # Use vendored OpenSSL for musl builds
          OPENSSL_STATIC: 1
          OPENSSL_VENDORED: 1
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/event-ingestor
            target/${{ matrix.target }}/release/ethhook-message-processor
            target/${{ matrix.target }}/release/ethhook-webhook-delivery
            target/${{ matrix.target }}/release/ethhook-admin-api

  sqlx-check:
    name: Verify SQLx Offline Mode
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Verify .sqlx directory exists
        run: |
          if [ ! -d ".sqlx" ]; then
            echo "Error: .sqlx directory not found!"
            exit 1
          fi
          echo "✓ .sqlx directory found"
          echo "Query cache files: $(ls -1 .sqlx/*.json | wc -l)"
      
      - name: Check offline mode is enabled
        run: |
          if [ ! -f ".cargo/config.toml" ]; then
            echo "Error: .cargo/config.toml not found!"
            exit 1
          fi
          if grep -q "SQLX_OFFLINE" .cargo/config.toml; then
            echo "✓ SQLX_OFFLINE is configured"
          else
            echo "Error: SQLX_OFFLINE not found in .cargo/config.toml"
            exit 1
          fi
      
      - name: Build with offline mode (no database)
        run: cargo build --workspace
        env:
          SQLX_OFFLINE: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: |
          # Allow specific vulnerabilities we can't fix yet:
          # - RUSTSEC-2024-0437: protobuf 2.28.0 (prometheus 0.13 dependency, v0.14 has breaking changes)
          # - RUSTSEC-2023-0071: rsa in sqlx-mysql (we use PostgreSQL, not MySQL)
          # - RUSTSEC-2024-0436: paste unmaintained (sqlx dependency)
          # - RUSTSEC-2024-0370: proc-macro-error unmaintained (validator dependency)
          cargo audit --deny unsound --deny yanked \
            --ignore RUSTSEC-2024-0437 \
            --ignore RUSTSEC-2023-0071 \
            --ignore RUSTSEC-2024-0436 \
            --ignore RUSTSEC-2024-0370

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ethhook
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ethhook
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      
      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features postgres
      
      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://ethhook:password@localhost:5432/ethhook
        run: |
          sqlx database create
          sqlx migrate run
      
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      
      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        env:
          DATABASE_URL: postgresql://ethhook:password@localhost:5432/ethhook
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-for-ci
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Check if Dockerfiles exist
        run: |
          echo "Checking for Dockerfiles..."
          if [ -f "Dockerfile" ] || [ -f "docker-compose.yml" ]; then
            echo "✓ Docker configuration found"
          else
            echo "⚠ No Dockerfile or docker-compose.yml found (this is OK for now)"
          fi
      
      - name: Validate docker-compose
        if: hashFiles('docker-compose.yml') != ''
        run: docker compose config

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, test, build, sqlx-check, security-audit]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SQLx Check | ${{ needs.sqlx-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.sqlx-check.result }}" != "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ CI Pipeline failed - please check the logs above" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ All CI checks passed!" >> $GITHUB_STEP_SUMMARY
          fi
