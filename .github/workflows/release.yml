name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_ext: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_ext: ''
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_ext: ''
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_ext: ''
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      
      - name: Build release binaries
        run: cargo build --workspace --release --target ${{ matrix.target }}
      
      - name: Package binaries
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ethhook-${{ matrix.target }}.tar.gz \
            event-ingestor${{ matrix.binary_ext }} \
            ethhook-message-processor${{ matrix.binary_ext }} \
            ethhook-webhook-delivery${{ matrix.binary_ext }} \
            ethhook-admin-api${{ matrix.binary_ext }}
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/ethhook-${{ matrix.target }}.tar.gz
          asset_name: ethhook-${{ matrix.target }}.tar.gz
          asset_content_type: application/gzip

  docker-release:
    name: Build and Push Docker Images
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Build and push Event Ingestor
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.event-ingestor
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ethhook-event-ingestor:latest
            ${{ secrets.DOCKER_USERNAME }}/ethhook-event-ingestor:${{ steps.version.outputs.VERSION }}
      
      - name: Build and push Message Processor
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.message-processor
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ethhook-message-processor:latest
            ${{ secrets.DOCKER_USERNAME }}/ethhook-message-processor:${{ steps.version.outputs.VERSION }}
      
      - name: Build and push Webhook Delivery
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.webhook-delivery
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ethhook-webhook-delivery:latest
            ${{ secrets.DOCKER_USERNAME }}/ethhook-webhook-delivery:${{ steps.version.outputs.VERSION }}
      
      - name: Build and push Admin API
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.admin-api
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/ethhook-admin-api:latest
            ${{ secrets.DOCKER_USERNAME }}/ethhook-admin-api:${{ steps.version.outputs.VERSION }}
