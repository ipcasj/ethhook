services:
  postgres:
    image: postgres:15-alpine
    container_name: ethhook-postgres
    environment:
      POSTGRES_DB: ethhook
      POSTGRES_USER: ethhook
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ethhook"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ethhook-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: ethhook-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    container_name: ethhook-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/ethhook.json
    depends_on:
      - prometheus

  # Uncomment when services are ready
  # event-ingestor:
  #   build:
  #     context: .
  #     dockerfile: crates/event-ingestor/Dockerfile
  #   container_name: ethhook-event-ingestor
  #   env_file: .env
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped

  # message-processor:
  #   build:
  #     context: .
  #     dockerfile: crates/message-processor/Dockerfile
  #   container_name: ethhook-message-processor
  #   env_file: .env
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped

  # webhook-delivery:
  #   build:
  #     context: .
  #     dockerfile: crates/webhook-delivery/Dockerfile
  #   container_name: ethhook-webhook-delivery
  #   env_file: .env
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped

  # admin-api:
  #   build:
  #     context: .
  #     dockerfile: crates/admin-api/Dockerfile
  #   container_name: ethhook-admin-api
  #   env_file: .env
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
